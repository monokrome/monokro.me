#!/usr/bin/env coffee

{argv} = require 'optimist'
{find} = require 'findit'

Q = require 'q'

fs = require 'fs'
_ = require 'lodash'
path = require 'path'
mkdirp = require 'mkdirp'

class BlogHandler
  indexFileName: './public/api/blog/articles.json'
  articlesDirectory: './app/articles'

  constructor: (@argv) ->
    if argv._.length is 0
      argv._.push 'create'

    commandHandler = @[argv._[0]]

    if not commandHandler? or argv._[0][0] == '_'
      process.stderr.write "No blog command found for #{argv._[0]}"
      process.exit 100

    commandHandler.call @

  currentFilename: ->
    date = new Date

    segments = [
      @articlesDirectory,
      date.getFullYear().toString(),
      (date.getMonth() + 1).toString(),
      date.getDate().toString() + '.md'
    ]

    path.join.apply @, segments

  create: ->
    # Create a new blog entry. This is the default when no commands are
    # provided to the handler.
    currentFilename = @currentFilename()
    directory = path.dirname currentFilename

    if fs.existsSync currentFilename
      console.info "#{currentFilename}"
      return

    mkdirp directory, (err) =>
      if err
        console.error "Could not create file at #{currentFilename}"
        process.exit 110

      titleString = @argv.title or @argv.t or (new Date).toString()
      titleString = titleString.toLowerCase().replace /(?:^|\s)\S/g, (char) ->
        char.toUpperCase()

      underline = Array(titleString.length + 1).join '='

      f = fs.openSync currentFilename, 'w'
      fs.writeSync f, "#{titleString}\n#{underline}\n"
      fs.close f

      @index()

      console.info "#{currentFilename}"

  _listFiles: ->
    results = []
    deferred = Q.defer()

    finder = find @articlesDirectory

    finder.on 'file', (fileName) -> results.push fileName
    finder.on 'end', -> deferred.resolve results

    return deferred.promise

  index: ->
    # Index all blog entries into a JSON file which can be used by the
    # webapp to create a collection of articles.

    output = {}
    promise = @_listFiles()

    promise.done (fileNames) =>
      directoryName = path.dirname @indexFileName

      mkdirp directoryName, (err) =>
        if err
          console.error "Could not create directory: #{directoryName}"
          process.exit 210

        # TODO: Verify that this is being sorted properly
        _(fileNames).sort().reverse()

        output.articles = _.map fileNames, (filename) =>
          relativeFilename = filename[@articlesDirectory.length..]
          dotPosition = relativeFilename.indexOf '.'

          datePattern = new RegExp path.sep, 'g'
          dateString = relativeFilename[1..relativeFilename.indexOf('.')-1].replace(datePattern, '-')

          templateFilename = relativeFilename[..dotPosition-1]

          result =
            date: dateString
            filename: templateFilename

          return result

        output.count = fileNames.length

        f = fs.openSync @indexFileName, 'w'
        fs.writeSync f, JSON.stringify output.articles
        fs.close f

subjects =
  blog: BlogHandler

if argv._.length is 0
  process.stderr.write 'Usage: mk command\n'
  process.exit 1

subject = argv._.shift()

if not subjects[subject]?
  process.stderr.write "Unknown command: #{subject}"
  process.exit 2

handler = new subjects[subject] argv

